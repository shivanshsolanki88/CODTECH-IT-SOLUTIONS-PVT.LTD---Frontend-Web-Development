
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Real-Time Chat</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="chat-container">
        <div class="chat-header">
            <div class="chat-title">
                <i class="fas fa-comments"></i>
                <h1>WebSocket Chat</h1>
            </div>
            <div class="chat-status">
                <span id="connection-status">Connecting...</span>
            </div>
        </div>
        
        <div class="chat-messages" id="chat-messages">
            <!-- Messages will appear here -->
        </div>
        
        <div class="chat-input">
            <input type="text" id="message-input" placeholder="Type your message here..." autocomplete="off">
            <button id="send-button"><i class="fas fa-paper-plane"></i></button>
        </div>
        
        <div class="chat-sidebar-toggle">
            <i class="fas fa-users"></i>
        </div>
        
        <div class="chat-sidebar">
            <div class="sidebar-header">
                <h3>Online Users</h3>
                <i class="fas fa-times sidebar-close"></i>
            </div>
            <ul id="user-list">
                <!-- Online users will appear here -->
                <li>Loading users...</li>
            </ul>
        </div>
    </div>

    <div class="login-modal" id="login-modal">
        <div class="modal-content">
            <h2>Welcome to Chat</h2>
            <p>Enter your username to join the conversation</p>
            <input type="text" id="username-input" placeholder="Choose a username" autocomplete="off">
            <button id="login-button">Join Chat</button>
        </div>
    </div>

    <script src="app.js"></script>
</body>
</html>


:root {
    --primary-color: #4a6fa5;
    --secondary-color: #166088;
    --dark-color: #1a2639;
    --light-color: #f0f4f8;
    --success-color: #4caf50;
    --error-color: #f44336;
    --warning-color: #ff9800;
    --info-color: #2196f3;
    --text-color: #333;
    --text-light: #666;
    --border-radius: 8px;
    --box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    --transition: all 0.3s ease;
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Roboto', sans-serif;
    background-color: #f5f5f5;
    color: var(--text-color);
    line-height: 1.6;
    height: 100vh;
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 20px;
}

.chat-container {
    width: 100%;
    max-width: 1000px;
    height: 90vh;
    max-height: 800px;
    background-color: white;
    border-radius: var(--border-radius);
    box-shadow: var(--box-shadow);
    display: flex;
    flex-direction: column;
    position: relative;
    overflow: hidden;
}

.chat-header {
    background-color: var(--primary-color);
    color: white;
    padding: 15px 20px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-top-left-radius: var(--border-radius);
    border-top-right-radius: var(--border-radius);
}

.chat-title {
    display: flex;
    align-items: center;
    gap: 10px;
}

.chat-title i {
    font-size: 1.5rem;
}

.chat-status {
    font-size: 0.9rem;
    opacity: 0.9;
}

.chat-messages {
    flex: 1;
    padding: 20px;
    overflow-y: auto;
    background-color: #f9f9f9;
    display: flex;
    flex-direction: column;
    gap: 15px;
}

.message {
    max-width: 70%;
    padding: 12px 15px;
    border-radius: var(--border-radius);
    position: relative;
    word-wrap: break-word;
    animation: fadeIn 0.3s ease;
}

@keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
}

.message.sent {
    align-self: flex-end;
    background-color: var(--primary-color);
    color: white;
    border-bottom-right-radius: 0;
}

.message.received {
    align-self: flex-start;
    background-color: white;
    color: var(--text-color);
    border: 1px solid #e0e0e0;
    border-bottom-left-radius: 0;
}

.message-info {
    display: flex;
    justify-content: space-between;
    font-size: 0.75rem;
    margin-top: 5px;
    opacity: 0.8;
}

.message.sent .message-info {
    color: rgba(255, 255, 255, 0.8);
}

.message.received .message-info {
    color: var(--text-light);
}

.message-system {
    align-self: center;
    background-color: var(--light-color);
    color: var(--text-light);
    font-size: 0.85rem;
    padding: 8px 15px;
    border-radius: 20px;
    text-align: center;
    max-width: 90%;
}

.chat-input {
    display: flex;
    padding: 15px;
    background-color: white;
    border-top: 1px solid #e0e0e0;
}

.chat-input input {
    flex: 1;
    padding: 12px 15px;
    border: 1px solid #e0e0e0;
    border-radius: var(--border-radius);
    outline: none;
    font-size: 1rem;
    transition: var(--transition);
}

.chat-input input:focus {
    border-color: var(--primary-color);
    box-shadow: 0 0 0 2px rgba(74, 111, 165, 0.2);
}

.chat-input button {
    background-color: var(--primary-color);
    color: white;
    border: none;
    border-radius: var(--border-radius);
    padding: 0 20px;
    margin-left: 10px;
    cursor: pointer;
    transition: var(--transition);
    display: flex;
    align-items: center;
    justify-content: center;
}

.chat-input button:hover {
    background-color: var(--secondary-color);
}

.chat-input button:disabled {
    background-color: #cccccc;
    cursor: not-allowed;
}

.chat-sidebar-toggle {
    position: absolute;
    right: 20px;
    bottom: 80px;
    background-color: var(--primary-color);
    color: white;
    width: 50px;
    height: 50px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    box-shadow: var(--box-shadow);
    z-index: 10;
    transition: var(--transition);
}

.chat-sidebar-toggle:hover {
    background-color: var(--secondary-color);
    transform: scale(1.05);
}

.chat-sidebar {
    position: absolute;
    top: 0;
    right: -300px;
    width: 300px;
    height: 100%;
    background-color: white;
    border-left: 1px solid #e0e0e0;
    transition: var(--transition);
    z-index: 20;
    display: flex;
    flex-direction: column;
}

.chat-sidebar.active {
    right: 0;
}

.sidebar-header {
    padding: 15px;
    border-bottom: 1px solid #e0e0e0;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.sidebar-header h3 {
    font-size: 1.1rem;
    color: var(--text-color);
}

.sidebar-close {
    cursor: pointer;
    color: var(--text-light);
    transition: var(--transition);
}

.sidebar-close:hover {
    color: var(--text-color);
}

#user-list {
    flex: 1;
    overflow-y: auto;
    list-style: none;
}

#user-list li {
    padding: 12px 15px;
    border-bottom: 1px solid #f0f0f0;
    display: flex;
    align-items: center;
    gap: 10px;
}

#user-list li::before {
    content: '';
    display: block;
    width: 10px;
    height: 10px;
    background-color: var(--success-color);
    border-radius: 50%;
}

.login-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 100;
}

.modal-content {
    background-color: white;
    padding: 30px;
    border-radius: var(--border-radius);
    width: 100%;
    max-width: 400px;
    text-align: center;
    box-shadow: var(--box-shadow);
}

.modal-content h2 {
    margin-bottom: 10px;
    color: var(--primary-color);
}

.modal-content p {
    margin-bottom: 20px;
    color: var(--text-light);
}

.modal-content input {
    width: 100%;
    padding: 12px 15px;
    margin-bottom: 20px;
    border: 1px solid #e0e0e0;
    border-radius: var(--border-radius);
    font-size: 1rem;
    outline: none;
    transition: var(--transition);
}

.modal-content input:focus {
    border-color: var(--primary-color);
    box-shadow: 0 0 0 2px rgba(74, 111, 165, 0.2);
}

.modal-content button {
    background-color: var(--primary-color);
    color: white;
    border: none;
    border-radius: var(--border-radius);
    padding: 12px 25px;
    font-size: 1rem;
    cursor: pointer;
    transition: var(--transition);
    width: 100%;
}

.modal-content button:hover {
    background-color: var(--secondary-color);
}

/* Responsive styles */
@media (max-width: 768px) {
    .chat-container {
        height: 100vh;
        max-height: none;
        border-radius: 0;
    }
    
    .chat-header {
        border-radius: 0;
    }
    
    .message {
        max-width: 85%;
    }
    
    .chat-sidebar {
        width: 250px;
    }
}

/* Scrollbar styles */
::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 4px;
}

::-webkit-scrollbar-thumb {
    background: #c1c1c1;
    border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
    background: #a8a8a8;
}

document.addEventListener('DOMContentLoaded', function() {
    // DOM Elements
    const chatMessages = document.getElementById('chat-messages');
    const messageInput = document.getElementById('message-input');
    const sendButton = document.getElementById('send-button');
    const connectionStatus = document.getElementById('connection-status');
    const sidebarToggle = document.querySelector('.chat-sidebar-toggle');
    const sidebar = document.querySelector('.chat-sidebar');
    const sidebarClose = document.querySelector('.sidebar-close');
    const userList = document.getElementById('user-list');
    const loginModal = document.getElementById('login-modal');
    const usernameInput = document.getElementById('username-input');
    const loginButton = document.getElementById('login-button');
    
    // App state
    let username = '';
    let socket;
    let isConnected = false;
    let reconnectAttempts = 0;
    const maxReconnectAttempts = 5;
    const reconnectDelay = 3000; // 3 seconds
    
    // Show login modal initially
    loginModal.style.display = 'flex';
    
    // Initialize WebSocket connection
    function initWebSocket() {
        // In a real app, you would connect to your WebSocket server
        // For this demo, we'll simulate the connection
        console.log('Connecting to WebSocket server...');
        connectionStatus.textContent = 'Connecting...';
        connectionStatus.style.color = 'orange';
        
        // Simulate connection (in a real app, replace with actual WebSocket)
        setTimeout(() => {
            isConnected = true;
            connectionStatus.textContent = 'Connected';
            connectionStatus.style.color = 'lightgreen';
            
            // Add a welcome message
            addSystemMessage('You have joined the chat');
            
            // Simulate some users online
            updateUserList(['Alice', 'Bob', 'Charlie']);
            
            // Simulate some received messages
            setTimeout(() => {
                addReceivedMessage('Alice', 'Hello everyone! 👋');
            }, 1000);
            
            setTimeout(() => {
                addReceivedMessage('Bob', 'Welcome to the chat!');
            }, 2000);
        }, 1500);
    }
    
    // Handle login
    loginButton.addEventListener('click', function() {
        const inputUsername = usernameInput.value.trim();
        
        if (inputUsername.length < 3) {
            alert('Username must be at least 3 characters long');
            return;
        }
        
        username = inputUsername;
        loginModal.style.display = 'none';
        initWebSocket();
    });
    
    // Also allow login with Enter key
    usernameInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            loginButton.click();
        }
    });
    
    // Add a new message to the chat
    function addMessage(content, type, sender = '') {
        const messageDiv = document.createElement('div');
        messageDiv.classList.add('message', type);
        
        let messageContent = content;
        if (type === 'received') {
            messageContent = `<strong>${sender}:</strong> ${content}`;
        }
        
        const now = new Date();
        const timeString = now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        
        messageDiv.innerHTML = `
            <div class="message-content">${messageContent}</div>
            <div class="message-info">
                <span>${type === 'system' ? '' : timeString}</span>
            </div>
        `;
        
        chatMessages.appendChild(messageDiv);
        scrollToBottom();
    }
    
    // Helper function for system messages
    function addSystemMessage(content) {
        addMessage(content, 'system');
    }
    
    // Helper function for received messages
    function addReceivedMessage(sender, content) {
        addMessage(content, 'received', sender);
    }
    
    // Helper function for sent messages
    function addSentMessage(content) {
        addMessage(content, 'sent');
    }
    
    // Scroll chat to bottom
    function scrollToBottom() {
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }
    
    // Update online users list
    function updateUserList(users) {
        userList.innerHTML = '';
        
        if (users.length === 0) {
            userList.innerHTML = '<li>No users online</li>';
            return;
        }
        
        users.forEach(user => {
            const li = document.createElement('li');
            li.textContent = user;
            userList.appendChild(li);
        });
    }
    
    // Send message
    function sendMessage() {
        const message = messageInput.value.trim();
        
        if (!message || !isConnected) return;
        
        // In a real app, you would send this via WebSocket
        // For this demo, we'll just add it to the chat
        addSentMessage(message);
        
        // Simulate a response after a short delay
        setTimeout(() => {
            const randomResponses = [
                "That's interesting!",
                "I agree with you.",
                "Can you explain more about that?",
                "Thanks for sharing!",
                "What do others think about this?",
                "I have a different perspective on that."
            ];
            const randomUser = ['Alice', 'Bob', 'Charlie'][Math.floor(Math.random() * 3)];
            const randomResponse = randomResponses[Math.floor(Math.random() * randomResponses.length)];
            
            addReceivedMessage(randomUser, randomResponse);
        }, 1000 + Math.random() * 2000);
        
        messageInput.value = '';
    }
    
    // Event listeners
    sendButton.addEventListener('click', sendMessage);
    
    messageInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            sendMessage();
        }
    });
    
    // Toggle sidebar
    sidebarToggle.addEventListener('click', function() {
        sidebar.classList.add('active');
    });
    
    sidebarClose.addEventListener('click', function() {
        sidebar.classList.remove('active');
    });
    
    // Close sidebar when clicking outside
    document.addEventListener('click', function(e) {
        if (!sidebar.contains(e.target) && e.target !== sidebarToggle) {
            sidebar.classList.remove('active');
        }
    });
    
    // Initial scroll to bottom
    scrollToBottom();
});
